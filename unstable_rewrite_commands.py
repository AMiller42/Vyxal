#
# THIS IS ASSOCIATED WITH THE UNSTABLE VYXAL FILE. IGNORE IT UNTIL THE REWRITE IS FINISHED AND MADE THE MAIN FILE
#

codepage = "λ¬∧⟑∨⟇÷«»°\n․⍎½∆øÏÔÇæʀʁɾɽÞƈ∞⫙ß⎝⎠ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~⎡⎣⨥⨪∺❝ð£¥§¦¡∂ÐřŠč√∖ẊȦȮḊĖẸṙ∑Ṡİ•\t"
codepage += "Ĥ⟨⟩ƛıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘŚśŜŝŞşšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſƀƁƂƃƄƅƆƇƊƋƌƍƎ¢≈Ωªº"

command_dict = {

    "!": "stack.push(len(stack))",
    '"': "stack = iterable_shift(stack, ShiftDirections.RIGHT)",
    "'": "stack = iterable_shift(stack, ShiftDirections.LEFT)",
    "$": "top = pop(stack); over = pop(stack); stack += [top, over]",
    "%": "rhs, lhs = pop(stack, 2); stack.append(modulo(lhs, rhs))",
    "*": "rhs, lhs = pop(stack, 2); stack.append(multiply(lhs, rhs))",
    "+": "rhs, lhs = pop(stack, 2); stack.append(add(lhs, rhs))",
    ",": "VY_print(pop(stack), end=''); printed = True",
    "-": "rhs, lhs = pop(stack, 2); stack.append(subtract(lhs, rhs))",
    "/": "rhs, lhs = pop(stack, 2); stack.append(divide(lhs, rhs))",
    ":": "temp = deref(pop(stack)); stack += [temp]*2",
    "<": "rhs, lhs = pop(stack, 2); stack.append(compare(lhs, rhs, Comparitors.LESS_THAN))",
    ">": "rhs, lhs = pop(stack, 2); stack.append(compare(lhs, rhs, Comparitors.GREATER_THAN))",
    "=": "rhs, lhs = pop(stack, 2); stack.append(compare(lhs, rhs, Comparitors.EQUALS))",
    "?": "stack.append(get_input())",
    "A": "stack.append(int(all(iterable(pop(stack)))))",
    "B": "stack.append(VY_int(pop(stack), 2))",
    "C": "stack.append(chrord(pop(stack)))",
    "D": "temp = deref(pop(stack)); stack += [temp]*3",
    "E": "stack.append(eval(pop(stack)))",
    "F": "vector, fn = pop(stack, 2); stack.append(VY_filter(fn, vector))",
    "G": "stack.append(max(iterable(pop(stack))))",
    "H": "stack.append(VY_int(pop(stack), 16))",
    "I": "stack.append(VY_int(pop(stack)))",
    "J": "rhs, lhs = pop(stack, 2); stack.append(join(lhs, rhs))",
    "K": "stack.append(divisors_of(pop(stack)))",
    "L": "stack.append(len(iterable(pop(stack))))",
    "M": "vector, fn = pop(stack, 2); stack.append(VY_map(fn, vector))",
    "N": "pass",
    "O": "needle, haystack = pop(stack, 2); stack.append(iterable(haystack).count(needle))",
    "P": "rhs, lhs = pop(stack, 2); stack.append(str(lhs).strip(str(rhs)))",
    "Q": "exit()",
    "R": "vector, fn = pop(stack, 2); stack.append(VY_reduce(fn, vector))",
    "S": "stack.append(str(pop(stack)))",
    "T": "stack.append([n for n in pop(stack) if bool(n)])",
    "U": "stack.append(uniquify(pop(stack)))",
    "V": "replacement, needle, haystack = pop(stack, 3); stack.append(replace(haystack, needle, replacement))",
    "W": "stack = [stack]",
    "X": "context_level += 1",
    "Y": "rhs, lhs = pop(stack, 2); stack.append(interleave(lhs, rhs))",
    "Z": "rhs, lhs = pop(stack, 2); stack.append(Generator(zip(iterable(lhs), iterable(rhs))))",
    "a": "stack.append(int(any(iterable(pop(stack)))))",
    "b": "stack.append(VY_bin(pop(stack)))",
    "c": "rhs, lhs = pop(stack, 2); stack.append(int(lhs in interable(rhs)))",
    "d": "stack.append(multiply(pop(stack), 2))",
    "e": "rhs, lhs = pop(stack, 2); stack.append(exponate(lhs, rhs))",
    "f": "stack.append(flatten(iterable(pop(stack))))",
    "g": "stack.append(min(iterable(pop(stack))))",
    "h": "stack.append(iterable(pop(stack))[0])",
    "i": "rhs, lhs = pop(stack, 2); stack.append(iterable(lhs)[rhs])",
    "j": "rhs, lhs = pop(stack, 2); stack.append(str(lhs).join([str(x) for x in rhs]))",
    "l": "stack.append([])",
    "m": "item = pop(stack); stack.append(add(item, reverse(item)))",
    "n": "stack.append(context_values[context_level % len(context_values)])",
    "o": "needle, haystack = pop(stack, 2); stack.append(str(haystack).replace(str(needle)))",
    "p": "rhs, lhs = pop(stack, 2); stack.append(str(lhs).startswith(str(rhs)))",
    "q": "stack.append('`' + str(pop(stack)) + '`')",
    "r": "rhs, lhs = pop(stack, 2); stack.append(orderless_range(lhs, rhs))",
    "s": "stack.append(VY_sorted(iterable(pop(stack))))",
    "t": "stack.append(iterable(pop(stack))[-1])",
    "u": "stack.append(VY_sorted(uniquify(pop(stack))))",
    "w": "stack.append([pop(stack)])",
    "x": "context_level -= 1",
    "y": "stack += uninterleave(pop(stack))",
    "z": "vector, fn = pop(stack, 2); stack.append(Generator(zip(vector, VY_map(fn, vector))))",
    "~": "stack.append(random.randint(-32768, 32768))",
    "¬": "stack.append(int(not pop(stack)))",
    "∧": "rhs, lhs = pop(stack, 2); stack.append(lhs and rhs)",
    "⟑": "rhs, lhs = pop(stack, 2); stack.append(not (lhs and rhs))",
    "∨": "rhs, lhs = pop(stack, 2); stack.append(lhs or rhs)",
    "⟇": "rhs, lhs = pop(stack, 2); stack.append(not (lhs or rhs))",
    "÷": "for item in iterable(pop(stack)): stack.append(item)",
    "⍎": "fn = pop(stack); stack += fn(stack)",
    "Ṛ": "rhs, lhs = pop(stack, 2); stack.append(random.randint(lhs, rhs))",
    "Ï": "rhs, lhs = pop(stack, 2); stack.append(iterable(lhs).find(rhs))",
    "Ô": "stack.append(Generator(lambda x: (2 * (x - 1)) + 1))",
    "∞": "stack.append(Generator(lambda x: x))"
}
