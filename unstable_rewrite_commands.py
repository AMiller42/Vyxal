codepage = "λ¬∧⟑∨⟇÷«»°\n․⍎½∆øÏÔÇæʀʁɾɽÞƈ∞⫙ß⎝⎠ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~⎡⎣⨥⨪∺❝ð£¥§¦¡∂ÐřŠč√∖ẊȦȮḊĖẸṙ∑Ṡİ•\t"
codepage += "Ĥ⟨⟩ƛıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘŚśŜŝŞşšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſƀƁƂƃƄƅƆƇƊƋƌƍƎ¢≈Ωªº"

command_dict = {

    "!": "stack.push(len(stack))",
    '"': "stack = iterable_shift(stack, ShiftDirections.RIGHT)",
    "'": "stack = iterable_shift(stack, ShiftDirections.LEFT)",
    "$": "top = pop(stack); over = pop(stack); stack += [top, over]",
    "%": "rhs, lhs = pop(stack, 2); stack.append(modulo(lhs, rhs))",
    "*": "rhs, lhs = pop(stack, 2); stack.append(multiply(lhs, rhs))",
    "+": "rhs, lhs = pop(stack, 2); stack.append(add(lhs, rhs))",
    ",": "VY_print(pop(stack), end=''); printed = True",
    "-": "rhs, lhs = pop(stack, 2); stack.append(subtract(lhs, rhs))",
    "/": "rhs, lhs = pop(stack, 2); stack.append(divide(lhs, rhs))",
    ":": "temp = deref(pop(stack)); stack += [temp]*2",
    "<": "rhs, lhs = pop(stack, 2); stack.append(compare(lhs, rhs, Comparitors.LESS_THAN))",
    ">": "rhs, lhs = pop(stack, 2); stack.append(compare(lhs, rhs, Comparitors.GREATER_THAN))",
    "=": "rhs, lhs = pop(stack, 2); stack.append(compare(lhs, rhs, Comparitors.EQUALS))",
    "?": "stack.append(get_input())",
    "A": "stack.append(int(all(iterable(pop(stack)))))",
    "B": "stack.append(VY_int(pop(stack), 2))",
    "C": "stack.append(chrord(pop(stack)))",
    "D": "temp = deref(pop(stack)); stack += [temp]*3",
    "E": "stack.append(eval(pop(stack)))",
    "F": "fn, vector = pop(stack, 2); stack.append(VY_filter(fn, vector))",
    "G": "stack.append(max(iterable(pop(stack))))",
    "H": "stack.append(VY_int(pop(stack), 16))",
    "I": "stack.append(VY_int(pop(stack)))",
    "J": "rhs, lhs = pop(stack, 2); stack.append(join(lhs, rhs))",
    "K": "stack.append(divisors_of(pop(stack)))",
    "L": "stack.append(len(iterable(pop(stack))))",
    "M": "fn, vector = pop(stack, 2); stack.append(VY_map(fn, vector))",
    "N": "pass",
    "O": "needle, haystack = pop(stack, 2); stack.append(iterable(haystack).count(needle))",
    "P": "rhs, lhs = pop(stack, 2); stack.append(str(lhs).strip(str(rhs)))",
    "Q": "exit()",
    "R": "fn, vector = pop(stack, 2); stack.append(VY_reduce(fn, vector))",
    "S": "stack.append(str(pop(stack)))",
    "T": "stack.append([n for n in pop(stack) if bool(n)])",
    "U": "stack.append(uniquify(pop(stack)))",
    "V": "replacement, needle, haystack = pop(stack, 3); stack.append(replace(haystack, needle, replacement))",
    "W": "stack = [stack]",
    "X": "context_level += 1",
    "Y": "rhs, lhs = pop(stack, 2); stack.append(interleave(lhs, rhs))",
    "Z": "rhs, lhs = pop(stack, 2); stack.append(Generator(zip(iterable(lhs), iterable(rhs))))",
    "a": "stack.append(int(any(iterable(pop(stack)))))",
    "b": "stack.append(VY_bin(pop(stack)))",
    "c": "rhs, lhs = pop(stack, 2); stack.append(int(lhs in interable(rhs)))",
    "d": "stack.append(multiply(pop(stack), 2))",
    "e": "rhs, lhs = pop(stack, 2); stack.append(exponate(lhs, rhs))",
    "f": "stack.append(flatten(iterable(pop(stack))))",
    "g": "stack.append(min(iterable(pop(stack))))",
    "h": "stack.append(iterable(pop(stack))[0])",
    "i": "rhs, lhs = pop(stack, 2); stack.append(iterable(lhs)[rhs])",
    "j": "rhs, lhs = pop(stack, 2); stack.append(str(lhs).join([str(x) for x in rhs]))",
    "l": "stack.append([])",
    "m": "item = pop(stack); stack.append(add(item, reverse(item)))",
    "n": "stack.append(context_values[context_level % len(context_values)])",
    "o": "needle, haystack = pop(stack, 2); stack.append(str(haystack).replace(str(needle)))",
    "p": "rhs, lhs = pop(stack, 2); stack.append(str(lhs).startswith(str(rhs)))",
    "q": "stack.append('`' + str(pop(stack)) + '`')",
    "r": "rhs, lhs = pop(stack, 2); stack.append(orderless_range(lhs, rhs))",
    "s": "stack.append(VY_sorted(iterable(pop(stack))))",
    "t": "stack.append(iterable(pop(stack))[-1])",
    "u": "stack.append(VY_sorted(uniquify(pop(stack))))",
    "w": "stack.append([pop(stack)])",
    "x": "context_level -= 1",
    "y": "stack += uninterleave(pop(stack))",
    "z": "fn, vector = pop(stack, 2); stack.append(Generator(zip(vector, VY_map(fn, vector))))",
    "~": "stack.append(random.randint(-32768, 32768))",
    "¬": "stack.append(int(not pop(stack)))",
    "∧": "rhs, lhs = pop(stack, 2); stack.append(lhs and rhs)",
    "⟑": "rhs, lhs = pop(stack, 2); stack.append(int(not (lhs and rhs)))",
    "∨": "rhs, lhs = pop(stack, 2); stack.append(lhs or rhs)",
    "⟇": "rhs, lhs = pop(stack, 2); stack.append(int(not (lhs or rhs)))",
    "÷": "for item in iterable(pop(stack)): stack.append(item)",
    "⍎": "fn = pop(stack); stack += fn(stack)",
    "Ṛ": "rhs, lhs = pop(stack, 2); stack.append(random.randint(lhs, rhs))",
    "Ï": "rhs, lhs = pop(stack, 2); stack.append(iterable(lhs).find(rhs))",
    "Ô": "stack.append(Generator(lambda x: (2 * (x - 1)) + 1))",
    "∞": "stack.append(Generator(lambda x: x))",
    "Ç": "stack.append(subtract(1, pop(stack)))",
    "æ": "stack.append(int(is_prime(pop(stack))))",
    "ʀ": "stack.append(Generator(range(0, add(pop(stack), 1))))",
    "ʁ": "stack.append(Generator(range(0, pop(stack))))",
    "ɾ": "stack.append(Generator(range(1, add(pop(stack), 1))))",
    "ɽ": "stack.append(Generator(range(1, pop(stack))))",
    "Þ": "tos = iterable(pop(stack)); stack.append(int(tos == tos[::-1]))",
    "Ð": "alphabet, number = pop(stack, 2); stack.append(utilities.to_ten(number, alphabet))",
    "Š": "alphabet, number = pop(stack, 2); stack.append(utilities.from_ten(number, alphabet))",
    "ř": "rhs, lhs = pop(stack, 2); stack.append(repeat(lhs, rhs))",
    "∺": "stack.append(modulo(pop(stack), 2))",
    "⨥": "stack.append(add(pop(stack), 1))",
    "⨪": "stack.append(subtract(pop(stack), 1))",
    "Ĥ": "stack.append(100)",
    "Ĵ": "stack.append(''.join(pop(stack)))",
    "Ĳ": "stack.append('\\n'.join([str(x) for x in pop(stack)]))",
    "ĳ": "stack.append(10)",
    "ĵ": "x = pop(stack); stack.append(multiply(x, x))",
    "∑": "stack.append(summate(pop(stack)))",
    "Ķ": "rhs, lhs = pop(stack, 2); stack.append([lhs, rhs])",
    "č": "stack.append(int(pop(stack) != 1))",
    "½": "stack.append(divide(pop(stack), 2))",
    "❝": "stack.append('')",
    "ð": "stack.append(' ')",
    "č": "stack.append(pop(stack) != 1)",
    "√": "stack.append(exponate(pop(stack), 0.5))",
    "∖": "rhs, lhs = pop(stack, 2); stack.append(lhs // rhs)",
    "Ẋ": "rhs, lhs = pop(stack, 2); stack.append(int((lhs or rhs) and not (lhs and rhs)))",
    "Ȧ": "stack.append(abs(pop(stack)))",
    "Ȯ": "stack.append(oct(pop(stack)))",
    "ĸ": "value, vector = pop(stack, 2); stack.append(distribute(vector, value))",
    "Ĺ": "stack.append('\\n')",
    "ĺ": "stack.append(vertical_join(pop(stack)))",
    "Ļ": "padding, vector = pop(stack, 2); stack.append(vertical_join(vector, padding))",
    "Ń": "n, fn = pop(stack, 2); stack.append(first_n(fn, n))",
    "ń": "stack.append(first_n(pop(stack)))",
    "Ň": "stack.append(math.factorial(pop(stack)))",
    "ņ": "stack.appned(sums(iterable(pop(stack))))",
    "≈": "stack.append(int(len(set(iterable(pop(stack)))) == 1))",
    "ň": "stack.append(counts(pop(stack)))",
    "ŉ": "stack.append(reverse(pop(stack)))",
    "Ŋ": "stack.append(iterable(pop(stack), str)[:-1])",
    "⎝": "stack.append(min(pop(stack), key=lambda x: x[-1]))",
    "⎠": "stack.append(max(pop(stack), key=lambda x: x[-1]))",
    "ŋ": "stack = [summate(stack)]",
    "Ō": "stack.append(graded(pop(stack)))",
    "ō": "stack.append(reverse(graded(pop(stack))))",
    "Ŏ": "stack.append(None)",
    "ŏ": "vector, fn = pop(stack, 2); stack.append(indexes_where(fn, iterable(vector)))",
    "Ő": "vector, fn = pop(stack, 2); stack.append(VY_sorted(iterable, key=fn))",
    "ő": "register = pop(stack)",
    "Œ": "stack.append(multiply(pop(stack), -1))",
    "œ": "rhs, lhs = pop(stack, 2); stack.append(compare(modulo(lhs, rhs), 0, Comparitors.EQUALS))",
    "Ŕ": "rhs, lhs = pop(stack, 2); stack.append(vectorising_equals(lhs, rhs))",
    "ŕ": "rhs, lhs = pop(stack, 2); stack.append(compare(lhs, rhs, Comparitors.NOT_EQUALS))",
    "Ŗ": "stack.append(register)",
    "ŗ": "rhs, lhs = pop(stack, 2); stack.append(iterable(lhs)[rhs:])",
    "Ř": "rhs, lhs = pop(stack, 2); stack.append(lshift(lhs, rhs))",
    "Ś": "rhs, lhs = pop(stack, 2); stack.append(rshift(lhs, rhs))",
    "ś": "rhs, lhs = pop(stack, 2); stack.append(bit_and(lhs, rhs))",
    "Ŝ": "rhs, lhs = pop(stack, 2); stack.append(bit_or(lhs, rhs))",
    "ŝ": "rhs, lhs = pop(stack, 2); stack.append(bit_xor(lhs, rhs))",
    "Ş": "stack.append(bit_not(pop(stack)))",
    "ş": "item, vector = pop(stack, 2); stack.append(prepend(iterable(vector), item))",
    "š": "item, index, vector = pop(stack, 3); stack.append(inserted(vector, item, index))",
    "Ţ": "stack.append(random.choice(iterable(pop(stack))))",
    "ţ": "rhs, lhs = pop(stack, 2); stack.append(compare(lhs, rhs, Comparitors.LESS_THAN_EQUALS))",
    "Ť": "rhs, lhs = pop(stack, 2); stack.append(compare(lhs, rhs, Comparitors.GREATER_THAN_EQUALS))",
    "ť": "if len(stack) >= 2: stack.append(stack[-2])\nelse: stack.append(get_input())",
    "Ŧ": "value, index, vector = pop(stack, 3); stack.append(assigned(iterable(vector), index, value))",
    "ŧ": "stack.append(Generator(partition(pop(stack))))",
    "Ũ": "stack.append(Generator(itertools.permutation(iterable(pop(stack)))))",
    "ũ": "stack.append(integer_list(pop(stack)))",
    "Ū": "index, vector = pop(stack, 2); stack.append(iterable(vector)[0:index])",
    "ū": "index, iterable = pop(stack, 2); stack.append(iterable(vector)[1:index])",
    "Ŭ": "code = VyCompile(pop(stack)); exec(code);",
    "ŭ": "obj = iterable(pop(stack)); stack.append(Generator(range(1, len(obj) + 1)))",
    "Ů": "stack.append(group_consecutive(iterable(pop(stack))))",
    "ů": "string, new, original = pop(stack, 3); stack.append(transilterate(original, new, string))",
    "Ű": "stack.append(truthy_indexes(pop(stack)))",
    "ű": "rhs, lhs = pop(stack, 2); stack.append(Generator(itertools.product(iterable(lhs), iterable(rhs))))",
    "Ų": "stack.append(deltas(pop(stack)))",
    "ų": "stack.append(sign_of(pop(stack)))",
    "Ŵ": "length, vector = pop(stack, 2); vector = iterable(vector)\nif type(vector) is str: vector = list(iterable)\nstack.append(Generator(itertools.combinations(iterable, length)))",
    "ŵ": "if inputs: stack.append([inputs])\nelse:\n    s, x = [], input()\n    while x:\n        s.append(Vy_eval(x)); x = input()",
    "Ŷ": "print(stack[-1])"
}
